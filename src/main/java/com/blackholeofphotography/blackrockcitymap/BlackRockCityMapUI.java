/*
 * Copyright (c) 2019-2022, Kevin Nickerson (kevin@blackholeofphotography.com)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package com.blackholeofphotography.blackrockcitymap;

import com.blackholeofphotography.blackrockcitymap.path.Path;
import com.blackholeofphotography.blackrockcitymap.path.PathBounds;
import com.blackholeofphotography.llalocation.LLALocation;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.geom.Path2D;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import org.apache.batik.anim.dom.SAXSVGDocumentFactory;
import org.apache.batik.swing.gvt.GVTTreeRendererAdapter;
import org.apache.batik.swing.gvt.GVTTreeRendererEvent;
import org.apache.batik.util.XMLResourceDescriptor;
import org.w3c.dom.svg.SVGDocument;

/**
 *
 * @author Kevin Nickerson (kevin@blackholeofphotography.com)
 */
public class BlackRockCityMapUI extends javax.swing.JFrame
{

   double docWidth = 1;
   double docHeight = 1;
   /**
    * Creates new form BlackRockCityMap
    */
   public BlackRockCityMapUI ()
   {
      initComponents ();
      cbYear.setSelectedItem ("2024");

   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jPanel1 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      cbYear = new javax.swing.JComboBox<>();
      jSVGCanvas1 = new org.apache.batik.swing.JSVGCanvas();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      addWindowListener(new java.awt.event.WindowAdapter()
      {
         public void windowOpened(java.awt.event.WindowEvent evt)
         {
            formWindowOpened(evt);
         }
      });

      jLabel1.setText("Year:");

      cbYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2014", "2015", "2016", "2017", "2018", "2019", "2022", "2023", "2024" }));
      cbYear.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            cbYearActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(631, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(7, Short.MAX_VALUE))
      );

      jSVGCanvas1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
      {
         public void mouseDragged(java.awt.event.MouseEvent evt)
         {
            jSVGCanvas1MouseDragged(evt);
         }
      });
      jSVGCanvas1.addMouseWheelListener(new java.awt.event.MouseWheelListener()
      {
         public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
         {
            jSVGCanvas1MouseWheelMoved(evt);
         }
      });
      jSVGCanvas1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener()
      {
         public void ancestorMoved(java.awt.event.HierarchyEvent evt)
         {
         }
         public void ancestorResized(java.awt.event.HierarchyEvent evt)
         {
            jSVGCanvas1AncestorResized(evt);
         }
      });
      jSVGCanvas1.addMouseListener(new java.awt.event.MouseAdapter()
      {
         public void mousePressed(java.awt.event.MouseEvent evt)
         {
            jSVGCanvas1MousePressed(evt);
         }
         public void mouseReleased(java.awt.event.MouseEvent evt)
         {
            jSVGCanvas1MouseReleased(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
         .addComponent(jSVGCanvas1, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSVGCanvas1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void cbYearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbYearActionPerformed
   {//GEN-HEADEREND:event_cbYearActionPerformed
      String y = (String) cbYear.getSelectedItem ().toString ();
      DrawMap (Integer.parseInt (y));
   }//GEN-LAST:event_cbYearActionPerformed

   private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
   {//GEN-HEADEREND:event_formWindowOpened
      String y = (String) cbYear.getSelectedItem ().toString ();
      
      this.jSVGCanvas1.addGVTTreeRendererListener(new GVTTreeRendererAdapter() 
         {
            @Override
            public void gvtRenderingCompleted(GVTTreeRendererEvent e) 
            {
                rescale ();
            }
         });      
      DrawMap (Integer.parseInt (y));
      rescale ();
   }//GEN-LAST:event_formWindowOpened

   private void jSVGCanvas1AncestorResized(java.awt.event.HierarchyEvent evt)//GEN-FIRST:event_jSVGCanvas1AncestorResized
   {//GEN-HEADEREND:event_jSVGCanvas1AncestorResized
      rescale ();
   }//GEN-LAST:event_jSVGCanvas1AncestorResized

   private int zoomLevel = 25;
   private void jSVGCanvas1MouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_jSVGCanvas1MouseWheelMoved
   {//GEN-HEADEREND:event_jSVGCanvas1MouseWheelMoved
      zoomLevel += evt.getWheelRotation ();
      rescale ();
   }//GEN-LAST:event_jSVGCanvas1MouseWheelMoved

   private double centerTranslateX, centerTranslateY;
   private int dragStartX, dragStartY;
   private int dragDistanceX, dragDistanceY;
   
   private void jSVGCanvas1MouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jSVGCanvas1MouseDragged
   {//GEN-HEADEREND:event_jSVGCanvas1MouseDragged
      dragDistanceX = (evt.getX () - dragStartX);
      dragDistanceY = (evt.getY () - dragStartY);
      //System.out.printf ("D: %d, %d\n", dragDistanceX, dragDistanceY);
   }//GEN-LAST:event_jSVGCanvas1MouseDragged

   Rectangle currentRect;
   private void jSVGCanvas1MousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jSVGCanvas1MousePressed
   {//GEN-HEADEREND:event_jSVGCanvas1MousePressed
      dragStartX = evt.getX ();
      dragStartY = evt.getY ();
      dragDistanceX = 0;
      dragDistanceY = 0;
      //System.out.printf ("P: %d, %d\n", dragStartX, dragStartY);
      rescale ();
   }//GEN-LAST:event_jSVGCanvas1MousePressed

   private void jSVGCanvas1MouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jSVGCanvas1MouseReleased
   {//GEN-HEADEREND:event_jSVGCanvas1MouseReleased
      centerTranslateX += dragDistanceX;
      centerTranslateY += dragDistanceY;
      System.out.printf ("R: %f, %f, %d\n", centerTranslateX, centerTranslateY, zoomLevel);
      dragDistanceX = 0;
      dragDistanceY = 0;
      rescale ();
   }//GEN-LAST:event_jSVGCanvas1MouseReleased

   private void rescale ()
   {
      AffineTransform at = this.jSVGCanvas1.getRenderingTransform ();
      double scaleFactorX = this.jSVGCanvas1.getWidth () / docWidth;
      double scaleFactorY = this.jSVGCanvas1.getHeight () / docHeight;
      double scaleFactor = Math.min (scaleFactorX, scaleFactorY);
      scaleFactor *= zoomLevel * 4 / 100.0;
      at.setToScale (scaleFactor, scaleFactor);
      double translateX = (centerTranslateX + dragDistanceX) * 1/scaleFactor;
      double translateY = (centerTranslateY + dragDistanceY) * 1/scaleFactor;
      
      at.translate (translateX, translateY);
      this.jSVGCanvas1.setRenderingTransform (at, true);
   }




   private void DrawMap (int year)
   {
      BlackRockCity city = new BlackRockCity (year);
      
      BurningKML.createKML (year);
      BurningGeoJSON.createGeoJSON (year);
      
      centerTranslateX = -521.000000;
      centerTranslateY = -1244.000000;
      zoomLevel = 125;
      

      ArrayList<Path> map = city.drawCity  ();
      PathBounds b = city.Perimeter ().getBounds ();
      LLALocation base = b.UpperLeft;
      SVGGPSCoordinate ul = new SVGGPSCoordinate (base, b.UpperLeft);      
      SVGGPSCoordinate lr = new SVGGPSCoordinate (base, b.LowerRight);

      int x = (int) lr.xCoordinate ();
      int y = (int) lr.yCoordinate ();
      org.jfree.svg.SVGGraphics2D g2 = new org.jfree.svg.SVGGraphics2D (y, x);
      
      docWidth = lr.xCoordinate () - ul.xCoordinate ();
      docHeight = lr.yCoordinate () - ul.yCoordinate ();


      g2.setStroke (new BasicStroke (10));
      g2.setColor (Color.PINK);

      for (Path seg : map)
      {
         Path2D pp = new Path2D.Double ();
         pp.append (seg.toPath2D (base), true);
         g2.setColor (seg.getColor ());
         
         pp.closePath ();
         g2.draw (pp);
      }

      String svgElement = g2.getSVGElement ();

//      System.out.println (svgElement);


      //System.out.println (k.toString());
      File ko = new File (year + "BRC.svg");
      try (BufferedWriter writer = new BufferedWriter(new FileWriter(ko)))
      {
         writer.write (svgElement);
      }      
      catch (IOException ex)
      {
      }

      displaySVG (svgElement);
   }
   
   
   private void displaySVG (String svgElement)
   {
      StringReader reader = new StringReader(svgElement);
      String uri = "";
      try 
      {
         String parser = XMLResourceDescriptor.getXMLParserClassName();
         SAXSVGDocumentFactory f = new SAXSVGDocumentFactory(parser);
         SVGDocument doc = f.createSVGDocument(uri,reader);
         this.jSVGCanvas1.setDocument (doc);
      } 
      catch (IOException ex) 
      {
      } 
      finally 
      {
         reader.close();
      }  
   }
   
   /**
    * @param args the command line arguments
    */
   public static void main (String args[])
   {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
      /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try
      {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels ())
         {
            if ("Nimbus".equals (info.getName ()))
            {
               javax.swing.UIManager.setLookAndFeel (info.getClassName ());
               break;
            }
         }
      }
      catch (ClassNotFoundException ex)
      {
         java.util.logging.Logger.getLogger (BlackRockCityMapUI.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
      }
      catch (InstantiationException ex)
      {
         java.util.logging.Logger.getLogger (BlackRockCityMapUI.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
      }
      catch (IllegalAccessException ex)
      {
         java.util.logging.Logger.getLogger (BlackRockCityMapUI.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
      }
      catch (javax.swing.UnsupportedLookAndFeelException ex)
      {
         java.util.logging.Logger.getLogger (BlackRockCityMapUI.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater (new Runnable ()
      {
         @Override
         public void run ()
         {
            new BlackRockCityMapUI ().setVisible (true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JComboBox<String> cbYear;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JPanel jPanel1;
   private org.apache.batik.swing.JSVGCanvas jSVGCanvas1;
   // End of variables declaration//GEN-END:variables
}
